# .github/workflows/your-workflow-name.yml (e.g., publish.yml)
name: Node.js Package Publisher

on:
  release:
    types: [created] # Triggers when a GitHub Release is created

jobs:
  build: # Your existing test job
    name: Test Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Ensure this matches your project's requirements

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  publish-npm:
    name: Publish to npmjs.com
    needs: build # Ensures tests pass before publishing
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to checkout the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Use the same Node.js version as your build/test job
          registry-url: 'https://registry.npmjs.org/' # Prepares for npm publish

      - name: Install dependencies
        # Using npm ci for a clean install from package-lock.json
        run: npm ci

      # Optional: Add a build step here if your package needs it before publishing
      # This is separate from `npm test`. E.g., transpiling TypeScript, bundling.
      - name: Build package (if applicable)
        run: |
          # Check if a 'build' script exists in package.json
          if [ -n "$(node -e "console.log(require('./package.json').scripts.build)")" ]; then
            echo "Running build script..."
            npm run build
          else
            echo "No 'build' script found in package.json, skipping build step."
          fi

      - name: Determine npm dist-tag based on release tag
        id: npm_dist_tag # Give this step an ID to reference its output
        run: |
          RELEASE_TAG_NAME="${{ github.ref_name }}" # This is the Git tag associated with the GitHub Release
          echo "GitHub Release tag: $RELEASE_TAG_NAME"

          if [[ "$RELEASE_TAG_NAME" == *"-beta"* ]]; then
            echo "NPM_DIST_TAG=beta" >> $GITHUB_OUTPUT
          elif [[ "$RELEASE_TAG_NAME" == *"-alpha"* ]]; then
            echo "NPM_DIST_TAG=alpha" >> $GITHUB_OUTPUT
          elif [[ "$RELEASE_TAG_NAME" == *"-rc"* ]]; then
            echo "NPM_DIST_TAG=rc" >> $GITHUB_OUTPUT
          else
            # If no prerelease identifier is found, assume it's a stable release
            echo "NPM_DIST_TAG=latest" >> $GITHUB_OUTPUT
          fi
        # $GITHUB_OUTPUT is how you set output variables for later steps in the same job

      - name: Publish to npm
        run: |
          echo "Publishing to npm with dist-tag: ${{ steps.npm_dist_tag.outputs.NPM_DIST_TAG }}"
          # IMPORTANT: If your package is scoped (e.g., @username/package-name) AND public,
          # you MUST add --access public
          # Example: npm publish --tag ${{ steps.npm_dist_tag.outputs.NPM_DIST_TAG }} --access public
          npm publish --tag ${{ steps.npm_dist_tag.outputs.NPM_DIST_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }} # Using your existing secret name
